--- tests/MokaTest.php
+++ PHP_CodeSniffer
@@ -218,7 +218,6 @@
         $mock = $this->_mock(self::HELPER, ['methodWithNull' => true]);
         $this->assertEquals('INVOKE', $mock->methodWithNull());
     }
-
 }
 
 class MokaTest_Helper
@@ -263,10 +262,10 @@
     final public function methodWithFinal(array $result)
     {
     }
-
 }
 
-class MokaTest_Stub {
+class MokaTest_Stub
+{
 
     public $__addInstance = null;
     public $invoke = null;
@@ -293,5 +292,4 @@
         $this->invoke = [$method, $args];
         return 'INVOKE';
     }
-
-}
\ No newline at end of file
+}
--- tests/bootstrap.php
+++ PHP_CodeSniffer
@@ -7,4 +7,4 @@
 require 'src/moka/Spy.php';
 require 'src/moka/Stubs.php';
 require 'src/moka/Stub.php';
-require 'src/moka/Call.php';
\ No newline at end of file
+require 'src/moka/Call.php';
--- tests/moka/CallTest.php
+++ PHP_CodeSniffer
@@ -66,7 +66,7 @@
 
     public function testOnReturnsCall()
     {
-        $callback = function() {
+        $callback = function () {
             return true;
         };
 
@@ -75,14 +75,18 @@
 
     public function testInvokeWithOnReturnsValue()
     {
-        $result = $this->_call->on(function() { return true; })->
+        $result = $this->_call->on(function () {
+            return true;
+        })->
             returns('VALUE')->invoke([]);
         $this->assertEquals([true, 'VALUE'], $result);
     }
 
     public function testInvokeWithOnNotReturnsValue()
     {
-        $result = $this->_call->on(function() { return false; })->
+        $result = $this->_call->on(function () {
+            return false;
+        })->
             returns('VALUE')->invoke([]);
         $this->assertEquals([false, null], $result);
     }
@@ -91,34 +95,48 @@
 
     public function testCallReturnsCall()
     {
-        $this->assertInstanceOf('idfly\moka\Call',
-            $this->_call->calls(function() { return true; }));
+        $this->assertInstanceOf(
+            'idfly\moka\Call',
+            $this->_call->calls(function () {
+                return true;
+
+            })
+        );
     }
 
     public function testInvokeWithCallReturnsValue()
     {
-        $result = $this->_call->calls(function() { return 'RES'; })->invoke([]);
+        $result = $this->_call->calls(function () {
+            return 'RES';
+
+        })->invoke([]);
         $this->assertEquals([true, 'RES'], $result);
     }
 
     public function testInvokeWithCallAndReturnsThrowError()
     {
-        $this->setExpectedException('\idfly\moka\Error',
-            'can not use "returns()" and "calls()" together');
-        $result = $this->_call->calls(function() {})->returns('RESULT');
+        $this->setExpectedException(
+            '\idfly\moka\Error',
+            'can not use "returns()" and "calls()" together'
+        );
+        $result = $this->_call->calls(function () {
+        })->returns('RESULT');
     }
 
     public function testInvokeWithReturnsAndCallThrowError()
     {
-        $this->setExpectedException('\idfly\moka\Error',
-            'can not use "calls()" and "returns()" together');
-        $result = $this->_call->returns('RESULT')->calls(function() {});
-     }
-
+        $this->setExpectedException(
+            '\idfly\moka\Error',
+            'can not use "calls()" and "returns()" together'
+        );
+        $result = $this->_call->returns('RESULT')->calls(function () {
+        });
+    }
 }
 
 
-class CallTest_Stub {
+class CallTest_Stub
+{
 
     public $calls = null;
 

